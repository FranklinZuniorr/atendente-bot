{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/services/evolution/constants.ts"],"sourcesContent":["export enum ENUM_EVOLUTION_CONNECTION_STATE {\n    OPEN = 'open',\n    CLOSE = 'close',\n    NOT_FOUND = 'not_found'\n}"],"names":[],"mappings":";;;AAAO,IAAA,AAAK,yDAAA;;;;WAAA","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/constants.ts"],"sourcesContent":["export const ENVS = {\n  evolutionBaseUrl: process.env.EVOLUTION_BASE_URL,\n  evolutionApiKey: process.env.EVOLUTION_API_KEY,\n  mongoUrl: process.env.MONGO_URL,\n  webhookSendMessageUrl: process.env.WEBHOOK_SEND_MESSAGE_URL,\n  openAiBaseUrl: process.env.OPEN_AI_BASE_URL,\n  openAiApiKey: process.env.OPEN_AI_API_KEY,\n  stripeCallbackUrl: process.env.STRIPE_CALLBACK_URL,\n  stripeApiCompleteKey: process.env.STRIPE_API_COMPLETE_KEY,\n  stripePriceKey: process.env.STRIPE_PRICE_KEY\n};\n\nexport const AUTH_CODE_LOCAL_STORAGE_KEY = 'AUTH_CODE_LOCAL_STORAGE_KEY';\nexport const TELEPHONE_LOCAL_STORAGE_KEY = 'TELEPHONE_LOCAL_STORAGE_KEY';\n\nexport const COLORS = {\n  main: '#009CFF',\n  mainLow: '#9DD9FF',\n  red: '#FF0000'\n};"],"names":[],"mappings":";;;;;;AAAO,MAAM,OAAO;IAClB,kBAAkB,QAAQ,GAAG,CAAC,kBAAkB;IAChD,iBAAiB,QAAQ,GAAG,CAAC,iBAAiB;IAC9C,UAAU,QAAQ,GAAG,CAAC,SAAS;IAC/B,uBAAuB,QAAQ,GAAG,CAAC,wBAAwB;IAC3D,eAAe,QAAQ,GAAG,CAAC,gBAAgB;IAC3C,cAAc,QAAQ,GAAG,CAAC,eAAe;IACzC,mBAAmB,QAAQ,GAAG,CAAC,mBAAmB;IAClD,sBAAsB,QAAQ,GAAG,CAAC,uBAAuB;IACzD,gBAAgB,QAAQ,GAAG,CAAC,gBAAgB;AAC9C;AAEO,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AAEpC,MAAM,SAAS;IACpB,MAAM;IACN,SAAS;IACT,KAAK;AACP","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/services/evolution/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { EvolutionConnectionStateReturn, EvolutionEditWebhookBody, EvolutionFetchInstanceElementReturn, EvolutionInstanceConnectReturn, EvolutionNewInstanceBody, EvolutionNewMessageBody, EvolutionWebhookStatusReturn } from './interfaces';\nimport { ENUM_EVOLUTION_CONNECTION_STATE } from './constants';\nimport { ENVS } from '@/constants';\n\nexport class EvolutionService {\n  private static httpClient: AxiosInstance = axios.create({\n    baseURL: ENVS.evolutionBaseUrl,\n    headers: {\n      'apiKey': ENVS.evolutionApiKey\n    }\n  });\n\n  static async getState (instanceName: string): Promise<EvolutionConnectionStateReturn> {\n    const path: string = `instance/connectionState/${instanceName}`;\n    try {\n      const response: EvolutionConnectionStateReturn = (await this.httpClient.get(path)).data;\n      return response;\n    } catch {\n      return {instance: { instanceName, state: ENUM_EVOLUTION_CONNECTION_STATE.NOT_FOUND }};\n    }\n  }\n\n  static async newInstance (params: EvolutionNewInstanceBody) {\n    const path: string = 'instance/create';\n\n    try {\n      await this.httpClient.post(path, params);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async instanceConnect (instanceName: string): Promise<EvolutionInstanceConnectReturn> {\n    const path: string =  `instance/connect/${instanceName}`;\n\n    try {\n      const response: EvolutionInstanceConnectReturn = (await this.httpClient.get(path, { params: { number: instanceName } })).data;\n\n      if (!response.code || !response.base64 || !response.pairingCode) {\n        throw new Error(`${path}: Evolution codes not generated!`);\n      }\n\n      return response;\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async sendMessage (instanceName: string, params: EvolutionNewMessageBody) {\n    const path: string = `message/sendText/${instanceName}`;\n\n    try {\n      await this.httpClient.post(path, params);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async deleteInstance (instanceName: string) {\n    const path: string = `instance/delete/${instanceName}`;\n\n    try {\n      await this.httpClient.delete(path);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async logoutInstance (instanceName: string) {\n    const path: string = `instance/logout/${instanceName}`;\n\n    try {\n      await this.httpClient.delete(path);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async fetchInstance (instanceName: string): Promise<EvolutionFetchInstanceElementReturn[]> {\n    const path: string = 'instance/fetchInstances';\n\n    try {\n      const response: EvolutionFetchInstanceElementReturn[] = (await this.httpClient.get(path, { params: { instanceName } })).data;\n\n      return response;\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async changeWebhookStatus (instanceName: string, isActive: boolean) {\n    const path: string = `webhook/set/${instanceName}`;\n\n    const body: EvolutionEditWebhookBody = {\n      webhook: {\n        enabled: isActive,\n        events: ['MESSAGES_UPSERT', 'CONNECTION_UPDATE'],\n        url: ENVS.webhookSendMessageUrl || ''\n      }\n    };\n\n    try {\n      await this.httpClient.post(path, body);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async webhookStatus (instanceName: string): Promise<EvolutionWebhookStatusReturn> {\n    const path: string = `webhook/find/${instanceName}`;\n\n    try {\n      const response: EvolutionWebhookStatusReturn = (await this.httpClient.get(path)).data;\n      return { enabled: response.enabled };\n    } catch {\n      throw new Error(path);\n    }\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/client/webhook/connection-update/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { WebhookConnectionEventBody } from '../../interfaces';\nimport { EvolutionService } from '@/app/api/services/evolution';\nimport { ENUM_EVOLUTION_CONNECTION_STATE } from '@/app/api/services/evolution/constants';\nimport { EvolutionFetchInstanceElementReturn } from '@/app/api/services/evolution/interfaces';\n\nexport async function POST(req: Request) {\n  try {\n    const body: WebhookConnectionEventBody = await req.json();\n    \n    if (body.data.state === ENUM_EVOLUTION_CONNECTION_STATE.OPEN) {\n      const instances: EvolutionFetchInstanceElementReturn[] = await new Promise((resolve) => setTimeout(() => {\n        resolve(EvolutionService.fetchInstance(body.instance));\n      }, 2000));\n      const instance = instances[0];\n      const ownerTelephone = instance.ownerJid.slice(4).replace('@s.whatsapp.net', '');\n      const normalizedOwnerTelephone = ownerTelephone.length === 8 ? `55799${ownerTelephone}` : `5579${ownerTelephone}`;\n\n      if (!normalizedOwnerTelephone.startsWith(body.instance)) {\n        await EvolutionService.logoutInstance(body.instance);\n        await new Promise((resolve) => setTimeout(() => {\n          resolve(EvolutionService.deleteInstance(body.instance));\n        }, 3000));\n        return NextResponse.json({}, { status: 404 });\n      }\n    }\n\n    return NextResponse.json({}, { status: 200 });\n  } catch {\n    return NextResponse.json({}, { status: 400 });\n  }\n}\n\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;;;;AAGO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAmC,MAAM,IAAI,IAAI;QAEvD,IAAI,KAAK,IAAI,CAAC,KAAK,KAAK,yJAAA,CAAA,kCAA+B,CAAC,IAAI,EAAE;YAC5D,MAAM,YAAmD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW;oBACjG,QAAQ,qJAAA,CAAA,mBAAgB,CAAC,aAAa,CAAC,KAAK,QAAQ;gBACtD,GAAG;YACH,MAAM,WAAW,SAAS,CAAC,EAAE;YAC7B,MAAM,iBAAiB,SAAS,QAAQ,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,mBAAmB;YAC7E,MAAM,2BAA2B,eAAe,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,gBAAgB,GAAG,CAAC,IAAI,EAAE,gBAAgB;YAEjH,IAAI,CAAC,yBAAyB,UAAU,CAAC,KAAK,QAAQ,GAAG;gBACvD,MAAM,qJAAA,CAAA,mBAAgB,CAAC,cAAc,CAAC,KAAK,QAAQ;gBACnD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW;wBACxC,QAAQ,qJAAA,CAAA,mBAAgB,CAAC,cAAc,CAAC,KAAK,QAAQ;oBACvD,GAAG;gBACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,GAAG;oBAAE,QAAQ;gBAAI;YAC7C;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,GAAG;YAAE,QAAQ;QAAI;IAC7C,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,GAAG;YAAE,QAAQ;QAAI;IAC7C;AACF","debugId":null}}]
}