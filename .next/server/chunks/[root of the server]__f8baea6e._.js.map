{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/repositories/client/index.ts"],"sourcesContent":["import { Client, GetClientByTelephoneResponse } from './interfaces';\nimport ClientModel from './models/client';\n\nexport class ClientRepository {\n  private clientModel: typeof ClientModel;\n  private connect: () => Promise<void>;\n\n  constructor(clientModel: typeof ClientModel, connect: () => Promise<void>) {\n    this.clientModel = clientModel;\n    this.connect = connect;\n    this.connect();\n  }\n\n  async upsert(client: Client) {\n    try {\n      const filter = { telephone: client.telephone };\n  \n      const options = { upsert: true, new: true };\n  \n      const updatedClient = await this.clientModel.findOneAndUpdate(filter, client, options);\n  \n      return updatedClient;\n    } catch (error) {\n      throw new Error('Client not created or updated!', { cause: error });\n    }\n  }\n\n  async getByTelephone(telephone: string): Promise<GetClientByTelephoneResponse> {\n    try {\n      const client: GetClientByTelephoneResponse | null = await this.clientModel.findOne({ telephone });\n\n      if (!client) throw new Error('Client not found!');\n\n      return client;\n\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      throw new Error(errorMessage);\n    }\n  }\n\n  async deleteByTelephone(telephone: string) {\n    try {\n      const response = await this.clientModel.deleteOne({ telephone });\n\n      if (response.deletedCount === 0) throw new Error('None deleted!');\n    } catch {\n      throw new Error('It was not possible delete user by db!');\n    }\n  }\n  \n  async decrementClientTokens(clientId: string) {\n    try {\n      const response = await this.clientModel.updateOne({ _id: clientId }, { $inc: { messageTokens: -1 }});\n\n      if (response.modifiedCount === 0 ) throw new Error('None updated!');\n    } catch {\n      throw new Error('It was not possible decrement user tokens!');\n    }\n  }\n\n  async incrementClientTokens(clientId: string, qty: number) {\n    try {\n      const response = await this.clientModel.updateOne({ _id: clientId }, { $inc: { messageTokens: qty }});\n\n      if (response.modifiedCount === 0 ) throw new Error('None updated!');\n    } catch {\n      throw new Error('It was not possible increment user tokens!');\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAGO,MAAM;IACH,YAAgC;IAChC,QAA6B;IAErC,YAAY,WAA+B,EAAE,OAA4B,CAAE;QACzE,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO;IACd;IAEA,MAAM,OAAO,MAAc,EAAE;QAC3B,IAAI;YACF,MAAM,SAAS;gBAAE,WAAW,OAAO,SAAS;YAAC;YAE7C,MAAM,UAAU;gBAAE,QAAQ;gBAAM,KAAK;YAAK;YAE1C,MAAM,gBAAgB,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,QAAQ;YAE9E,OAAO;QACT,EAAE,OAAO,OAAO;YACd,MAAM,IAAI,MAAM,kCAAkC;gBAAE,OAAO;YAAM;QACnE;IACF;IAEA,MAAM,eAAe,SAAiB,EAAyC;QAC7E,IAAI;YACF,MAAM,SAA8C,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;gBAAE;YAAU;YAE/F,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;YAE7B,OAAO;QAET,EAAE,OAAO,OAAO;YACd,MAAM,eAAe,AAAC,MAAgB,OAAO;YAC7C,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,MAAM,kBAAkB,SAAiB,EAAE;QACzC,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;gBAAE;YAAU;YAE9D,IAAI,SAAS,YAAY,KAAK,GAAG,MAAM,IAAI,MAAM;QACnD,EAAE,OAAM;YACN,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,MAAM,sBAAsB,QAAgB,EAAE;QAC5C,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;gBAAE,KAAK;YAAS,GAAG;gBAAE,MAAM;oBAAE,eAAe,CAAC;gBAAE;YAAC;YAElG,IAAI,SAAS,aAAa,KAAK,GAAI,MAAM,IAAI,MAAM;QACrD,EAAE,OAAM;YACN,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,MAAM,sBAAsB,QAAgB,EAAE,GAAW,EAAE;QACzD,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;gBAAE,KAAK;YAAS,GAAG;gBAAE,MAAM;oBAAE,eAAe;gBAAI;YAAC;YAEnG,IAAI,SAAS,aAAa,KAAK,GAAI,MAAM,IAAI,MAAM;QACrD,EAAE,OAAM;YACN,MAAM,IAAI,MAAM;QAClB;IACF;AACF","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/repositories/client/models/client.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\nimport { Client } from '../interfaces';\n\nconst ClientSchema: Schema<Client & Document> = new Schema(\n  {\n    telephone: { type: String, required: true },\n    authCode: { type: String, required: true },\n    messageTokens: { type: Number, required: false },\n  },\n  { timestamps: true }\n);\n\nconst ClientModel = mongoose.models.Client || mongoose.model<Client>('Client', ClientSchema);\n\nexport default ClientModel;\n"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,eAA0C,IAAI,yGAAA,CAAA,SAAM,CACxD;IACE,WAAW;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC1C,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,eAAe;QAAE,MAAM;QAAQ,UAAU;IAAM;AACjD,GACA;IAAE,YAAY;AAAK;AAGrB,MAAM,cAAc,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAS,UAAU;uCAEhE","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/constants.ts"],"sourcesContent":["export const ENVS = {\n  evolutionBaseUrl: process.env.EVOLUTION_BASE_URL,\n  evolutionApiKey: process.env.EVOLUTION_API_KEY,\n  mongoUrl: process.env.MONGO_URL,\n  webhookSendMessageUrl: process.env.WEBHOOK_SEND_MESSAGE_URL,\n  openAiBaseUrl: process.env.OPEN_AI_BASE_URL,\n  openAiApiKey: process.env.OPEN_AI_API_KEY,\n  stripeCallbackUrl: process.env.STRIPE_CALLBACK_URL,\n  stripeApiCompleteKey: process.env.STRIPE_API_COMPLETE_KEY,\n  stripePriceKey: process.env.STRIPE_PRICE_KEY\n};\n\nexport const AUTH_CODE_LOCAL_STORAGE_KEY = 'AUTH_CODE_LOCAL_STORAGE_KEY';\nexport const TELEPHONE_LOCAL_STORAGE_KEY = 'TELEPHONE_LOCAL_STORAGE_KEY';\n\nexport const COLORS = {\n  main: '#009CFF',\n  mainLow: '#9DD9FF',\n  red: '#FF0000'\n};"],"names":[],"mappings":";;;;;;AAAO,MAAM,OAAO;IAClB,kBAAkB,QAAQ,GAAG,CAAC,kBAAkB;IAChD,iBAAiB,QAAQ,GAAG,CAAC,iBAAiB;IAC9C,UAAU,QAAQ,GAAG,CAAC,SAAS;IAC/B,uBAAuB,QAAQ,GAAG,CAAC,wBAAwB;IAC3D,eAAe,QAAQ,GAAG,CAAC,gBAAgB;IAC3C,cAAc,QAAQ,GAAG,CAAC,eAAe;IACzC,mBAAmB,QAAQ,GAAG,CAAC,mBAAmB;IAClD,sBAAsB,QAAQ,GAAG,CAAC,uBAAuB;IACzD,gBAAgB,QAAQ,GAAG,CAAC,gBAAgB;AAC9C;AAEO,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AAEpC,MAAM,SAAS;IACpB,MAAM;IACN,SAAS;IACT,KAAK;AACP","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/infra/mongoDb/index.ts"],"sourcesContent":["import { ENVS } from '@/constants';\nimport mongoose from 'mongoose';\n\nconst MONGO_URI = ENVS.mongoUrl;\n\nif (!MONGO_URI) {\n  throw new Error('⚠️ MONGO_URI não foi definida no .env');\n}\n\nexport const connectDB = async (): Promise<void> => {\n  if (mongoose.connection.readyState >= 1) {\n  }\n\n  await mongoose.connect(MONGO_URI);\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,YAAY,kHAAA,CAAA,OAAI,CAAC,QAAQ;AAE/B,IAAI,CAAC,WAAW;IACd,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,YAAY;IACvB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG,CACzC;IAEA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;AACzB","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/utils/index.ts"],"sourcesContent":["export const validateTelephone = (telephone: string): boolean => {\n  const phoneRegex = /^\\+?55\\s?\\(?\\d{2}\\)?\\s?9\\d{4}-?\\d{4}$/;\n  return phoneRegex.test(telephone);\n};"],"names":[],"mappings":";;;AAAO,MAAM,oBAAoB,CAAC;IAChC,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AACzB","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/services/evolution/constants.ts"],"sourcesContent":["export enum ENUM_EVOLUTION_CONNECTION_STATE {\n    OPEN = 'open',\n    CLOSE = 'close',\n    NOT_FOUND = 'not_found'\n}"],"names":[],"mappings":";;;AAAO,IAAA,AAAK,yDAAA;;;;WAAA","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/services/evolution/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { EvolutionConnectionStateReturn, EvolutionEditWebhookBody, EvolutionFetchInstanceElementReturn, EvolutionInstanceConnectReturn, EvolutionNewInstanceBody, EvolutionNewMessageBody, EvolutionWebhookStatusReturn } from './interfaces';\nimport { ENUM_EVOLUTION_CONNECTION_STATE } from './constants';\nimport { ENVS } from '@/constants';\n\nexport class EvolutionService {\n  private static httpClient: AxiosInstance = axios.create({\n    baseURL: ENVS.evolutionBaseUrl,\n    headers: {\n      'apiKey': ENVS.evolutionApiKey\n    }\n  });\n\n  static async getState (instanceName: string): Promise<EvolutionConnectionStateReturn> {\n    const path: string = `instance/connectionState/${instanceName}`;\n    try {\n      const response: EvolutionConnectionStateReturn = (await this.httpClient.get(path)).data;\n      return response;\n    } catch {\n      return {instance: { instanceName, state: ENUM_EVOLUTION_CONNECTION_STATE.NOT_FOUND }};\n    }\n  }\n\n  static async newInstance (params: EvolutionNewInstanceBody) {\n    const path: string = 'instance/create';\n\n    try {\n      await this.httpClient.post(path, params);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async instanceConnect (instanceName: string): Promise<EvolutionInstanceConnectReturn> {\n    const path: string =  `instance/connect/${instanceName}`;\n\n    try {\n      const response: EvolutionInstanceConnectReturn = (await this.httpClient.get(path, { params: { number: instanceName } })).data;\n\n      if (!response.code || !response.base64 || !response.pairingCode) {\n        throw new Error(`${path}: Evolution codes not generated!`);\n      }\n\n      return response;\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async sendMessage (instanceName: string, params: EvolutionNewMessageBody) {\n    const path: string = `message/sendText/${instanceName}`;\n\n    try {\n      await this.httpClient.post(path, params);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async deleteInstance (instanceName: string) {\n    const path: string = `instance/delete/${instanceName}`;\n\n    try {\n      await this.httpClient.delete(path);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async logoutInstance (instanceName: string) {\n    const path: string = `instance/logout/${instanceName}`;\n\n    try {\n      await this.httpClient.delete(path);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async fetchInstance (instanceName: string): Promise<EvolutionFetchInstanceElementReturn[]> {\n    const path: string = 'instance/fetchInstances';\n\n    try {\n      const response: EvolutionFetchInstanceElementReturn[] = (await this.httpClient.get(path, { params: { instanceName } })).data;\n\n      return response;\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async changeWebhookStatus (instanceName: string, isActive: boolean) {\n    const path: string = `webhook/set/${instanceName}`;\n\n    const body: EvolutionEditWebhookBody = {\n      webhook: {\n        enabled: isActive,\n        events: ['MESSAGES_UPSERT', 'CONNECTION_UPDATE'],\n        url: ENVS.webhookSendMessageUrl || ''\n      }\n    };\n\n    try {\n      await this.httpClient.post(path, body);\n    } catch {\n      throw new Error(path);\n    }\n  }\n\n  static async webhookStatus (instanceName: string): Promise<EvolutionWebhookStatusReturn> {\n    const path: string = `webhook/find/${instanceName}`;\n\n    try {\n      const response: EvolutionWebhookStatusReturn = (await this.httpClient.get(path)).data;\n      return { enabled: response.enabled };\n    } catch {\n      throw new Error(path);\n    }\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/middlewares/check-client/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { IResponse } from '../../interfaces';\nimport { validateTelephone } from '@/app/utils';\nimport { ENUM_EVOLUTION_CONNECTION_STATE } from '../../services/evolution/constants';\nimport { EvolutionService } from '../../services/evolution';\nimport { GetClientByTelephoneResponse } from '../../repositories/client/interfaces';\nimport { ClientRepository } from '../../repositories/client';\nimport ClientModel from '../../repositories/client/models/client';\nimport { connectDB } from '../../infra/mongoDb';\n\nconst clientRepository = new ClientRepository(ClientModel, connectDB);\n\nexport const checkClientMiddleware = async <TResponseData = unknown>(request: Request, fn: () => Promise<NextResponse<IResponse<TResponseData>>>): Promise<NextResponse<IResponse<TResponseData>>> => {\n  const authCode = request.headers.get('authCode');\n  const telephone = request.headers.get('telephone');\n\n  if (!authCode) return NextResponse.json({ message: 'O código de autorização é obrigatório no cabeçalho!'}, { status: 400 });\n  if (!telephone) return NextResponse.json({ message: 'O telefone é obrigatório no cabeçalho!'}, { status: 400 });\n  if (!validateTelephone(telephone)) {\n    return NextResponse.json({ message: 'Telefone inválido! O formato correto é +55 (XX) 9XXXX-XXXX.' }, { status: 400 });\n  }\n  const responseInstanceState: ENUM_EVOLUTION_CONNECTION_STATE = \n        (await EvolutionService.getState(telephone)).instance.state;\n  const isConnected = responseInstanceState === ENUM_EVOLUTION_CONNECTION_STATE.OPEN;\n\n  if (!isConnected) {\n    return NextResponse.json({ message: 'Esse telefone não está conectado!' }, { status: 403 });\n  }\n\n  try {\n    const client: GetClientByTelephoneResponse = await clientRepository.getByTelephone(telephone);\n\n    if (authCode !== client.authCode) {\n      return NextResponse.json({ message: 'Código de autorização inválido!' }, { status: 403 });\n    }\n\n    return fn();\n  } catch {\n    return NextResponse.json({ message: 'Cliente não encontrado!' }, { status: 404 });\n  }\n};"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAEA,MAAM,mBAAmB,IAAI,sJAAA,CAAA,mBAAgB,CAAC,iKAAA,CAAA,UAAW,EAAE,gJAAA,CAAA,YAAS;AAE7D,MAAM,wBAAwB,OAAgC,SAAkB;IACrF,MAAM,WAAW,QAAQ,OAAO,CAAC,GAAG,CAAC;IACrC,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEtC,IAAI,CAAC,UAAU,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAqD,GAAG;QAAE,QAAQ;IAAI;IACzH,IAAI,CAAC,WAAW,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAwC,GAAG;QAAE,QAAQ;IAAI;IAC7G,IAAI,CAAC,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE,YAAY;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8D,GAAG;YAAE,QAAQ;QAAI;IACrH;IACA,MAAM,wBACA,CAAC,MAAM,qJAAA,CAAA,mBAAgB,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK;IACjE,MAAM,cAAc,0BAA0B,yJAAA,CAAA,kCAA+B,CAAC,IAAI;IAElF,IAAI,CAAC,aAAa;QAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoC,GAAG;YAAE,QAAQ;QAAI;IAC3F;IAEA,IAAI;QACF,MAAM,SAAuC,MAAM,iBAAiB,cAAc,CAAC;QAEnF,IAAI,aAAa,OAAO,QAAQ,EAAE;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,OAAO;IACT,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF","debugId":null}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/api/client/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { ClientRepository } from '../repositories/client';\nimport ClientModel from '../repositories/client/models/client';\nimport { connectDB } from '../infra/mongoDb';\nimport { IResponse } from '../interfaces';\nimport { GetClientResponse } from './interfaces';\nimport { GetClientByTelephoneResponse } from '../repositories/client/interfaces';\nimport { validateTelephone } from '@/app/utils';\nimport { EvolutionService } from '../services/evolution';\nimport { ENUM_EVOLUTION_CONNECTION_STATE } from '../services/evolution/constants';\nimport { checkClientMiddleware } from '../middlewares/check-client/middleware';\n\n\nconst clientRepository = new ClientRepository(ClientModel, connectDB);\n\nexport async function GET(req: Request): Promise<NextResponse<IResponse<GetClientResponse>>> {\n  try {\n    const { url } = req;\n    const{ searchParams } = new URL(url);\n    const telephone = searchParams.get('telephone');\n    const authCode = searchParams.get('authCode');\n\n    if (!telephone) {\n      return NextResponse.json({ message: 'Telefone é obrigatório!' }, { status: 400 });\n    }\n\n    if (!authCode) {\n      return NextResponse.json({ message: 'Código de autorização é obrigatório!' }, { status: 400 });\n    }\n\n    if (!validateTelephone(telephone)) {\n      return NextResponse.json({ message: 'Telefone inválido! O formato correto é +55 (XX) 9XXXX-XXXX.' }, { status: 400 });\n    }\n\n    const responseInstanceState: ENUM_EVOLUTION_CONNECTION_STATE = \n        (await EvolutionService.getState(telephone)).instance.state;\n    const isConnected = responseInstanceState === ENUM_EVOLUTION_CONNECTION_STATE.OPEN;\n\n    if (!isConnected) {\n      return NextResponse.json({ message: 'Esse telefone não está conectado!' }, { status: 403 });\n    }\n\n    try {\n      const client: GetClientByTelephoneResponse = await clientRepository.getByTelephone(telephone);\n\n      if (authCode !== client.authCode) {\n        return NextResponse.json({ message: 'Código de autorização inválido!' }, { status: 403 });\n      }\n\n      return NextResponse.json({ data: client }, { status: 200 });\n    } catch {\n      return NextResponse.json({ message: 'Cliente não encontrado!' }, { status: 404 });\n    }\n        \n  } catch {\n    return NextResponse.json({ message: 'Não foi possível obter os dados do telefone!' }, { status: 404 });\n  }\n}\n\nexport async function DELETE(req: Request): Promise<NextResponse<IResponse>> {\n  const execute = async () => {\n    try {\n      const body = await req.json();\n  \n      try {\n        const { telephone } = body;\n      \n        if (!telephone) {\n          return NextResponse.json({ message: 'O telefone é obrigatório!' }, { status: 400 });\n        }\n\n        await EvolutionService.logoutInstance(telephone);\n        await new Promise((resolve) => setTimeout(() => {\n          resolve(EvolutionService.deleteInstance(telephone));\n        }, 3000));\n\n        await clientRepository.upsert({ telephone, authCode: '' });\n  \n        return NextResponse.json({ message: 'Conexão finalizada!' }, { status: 200 });\n      } catch {\n        return NextResponse.json({ message: 'Não foi possível finalizar a conexão!' }, { status: 400 });\n      }\n    } catch {\n      return NextResponse.json({ message: 'Nenhum dado enviado!' }, { status: 400 });\n    }\n  };\n  return await checkClientMiddleware(req, execute);\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}