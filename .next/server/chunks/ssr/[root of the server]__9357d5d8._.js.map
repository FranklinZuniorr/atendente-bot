{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/configs/redux/slices/clientSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ClientReduxState {\n  telephone: string;\n  authCode: string;\n  createdAt: string;\n  updatedAt: string;\n  messageTokens: number;\n}\n\nconst initialState: ClientReduxState | null = null;\n\nexport const clientSlice = createSlice({\n  name: 'client',\n  initialState,\n  reducers: {\n    setClient: (state: ClientReduxState | null, action: PayloadAction<ClientReduxState | null>) => {\n      state = action.payload;\n    },\n  },\n});\n\nexport const { setClient } = clientSlice.actions;\n\nexport default clientSlice.reducer;"],"names":[],"mappings":";;;;;AAAA;;AAWA,MAAM,eAAwC;AAEvC,MAAM,cAAc,CAAA,GAAA,2LAAA,CAAA,cAAW,AAAD,EAAE;IACrC,MAAM;IACN;IACA,UAAU;QACR,WAAW,CAAC,OAAgC;YAC1C,QAAQ,OAAO,OAAO;QACxB;IACF;AACF;AAEO,MAAM,EAAE,SAAS,EAAE,GAAG,YAAY,OAAO;uCAEjC,YAAY,OAAO","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/configs/redux/slices/index.ts"],"sourcesContent":["import { combineSlices } from '@reduxjs/toolkit';\nimport { clientSlice } from './clientSlice';\n\nexport const rootReducer = combineSlices(clientSlice);"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,cAAc,CAAA,GAAA,2LAAA,CAAA,gBAAa,AAAD,EAAE,uJAAA,CAAA,cAAW","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/configs/redux/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rootReducer } from './slices';\n\nexport const storeRedux = configureStore({\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof storeRedux.getState>\nexport type AppDispatch = typeof storeRedux.dispatch\n\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>();\nexport const useAppSelector = useSelector.withTypes<RootState>();"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,aAAa,CAAA,GAAA,2LAAA,CAAA,iBAAc,AAAD,EAAE;IACvC,SAAS,iJAAA,CAAA,cAAW;AACtB;AAKO,MAAM,iBAAiB,yJAAA,CAAA,cAAW,CAAC,SAAS;AAC5C,MAAM,iBAAiB,yJAAA,CAAA,cAAW,CAAC,SAAS","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/components/auth-middleware/auth-middleware.tsx"],"sourcesContent":["'use client';\n\nimport { useAppSelector } from '@/app/configs/redux/store';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { ReactNode, useEffect } from 'react';\n\ninterface AuthMiddlewareProps {\n  children: ReactNode;\n}\n\nexport const AuthMiddleware = ({ children }: AuthMiddlewareProps) => {\n  const navigate = useRouter();\n  const pathname = usePathname();\n  const client = useAppSelector((state) => state.client);\n\n  useEffect(() => {\n    if (!client) {\n      navigate.push('/login');\n    }\n  }, [client, navigate]);\n\n  if (!client && pathname !== '/login') {\n    return <div>Carregando...</div>;\n  }\n\n  return children;\n};\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAUO,MAAM,iBAAiB,CAAC,EAAE,QAAQ,EAAuB;IAC9D,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACzB,MAAM,WAAW,CAAA,GAAA,kIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,SAAS,CAAA,GAAA,uIAAA,CAAA,iBAAc,AAAD,EAAE,CAAC,QAAU,MAAM,MAAM;IAErD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,QAAQ;YACX,SAAS,IAAI,CAAC;QAChB;IACF,GAAG;QAAC;QAAQ;KAAS;IAErB,IAAI,CAAC,UAAU,aAAa,UAAU;QACpC,qBAAO,8OAAC;sBAAI;;;;;;IACd;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///home/fr/atendente-bot/src/app/configs/redux/provider/redux-provider.tsx"],"sourcesContent":["'use client';\n\nimport { Provider } from 'react-redux';\nimport { storeRedux } from '../store';\n\nexport default function ReduxProvider({ children }: { children: React.ReactNode }) {\n  return <Provider store={storeRedux}>{children}</Provider>;\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS,cAAc,EAAE,QAAQ,EAAiC;IAC/E,qBAAO,8OAAC,yJAAA,CAAA,WAAQ;QAAC,OAAO,uIAAA,CAAA,aAAU;kBAAG;;;;;;AACvC","debugId":null}}]
}